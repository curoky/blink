{% import "utils.j2" autogen_head,namespace_begin,namespace_end %}
{{ autogen_head() }}

#pragma once
#include <vector>
#include <map>
#include <set>
#include <string>

#include <rttr/type>

{{ namespace_begin() }}

{# struct xxx_constants { #}
{% for _, cs in thrift.Constants %}
  static const {{ cs.Type | cpp_type }}  {{ cs.Name }}_ = {{ cs.Value | cpp_value }};
  inline static const {{ cs.Type | cpp_type }}& {{ cs.Name }}() {
    return {{ cs.Name }}_;
  }
{% endfor %}
{# } #}

{# BEGIN declare_enums #}
{% for _, en in thrift.Enums %}
enum struct {{ en.Name }} {
  {% for v in en.Values %}
    {{ v.Name }} = {{ v.Value }},
  {% endfor %}
};
{% endfor %}
{# END declare_enums #}

{# BEGIN forward_declare #}
{% for _, st in thrift.Structs %}
struct {{ st.Name }};
{% endfor %}
{# END forward_declare #}

{# BEGIN typedefs #}
{% for _, td in thrift.Typedefs %}
typedef {{ td.PreRefType | cpp_type }} {{ td.Name }};
{% endfor %}
{# END typedefs #}

{# BEGIN declare_structs #}
{% for _, st in thrift.Structs %}
struct RTTR_API {{ st.Name }} {
  {% for f in st.Fields %}
  {{ f.Type | cpp_type }} {{ f.Name }} {% if f.Default %} = {{ f.Default | cpp_value }} {% endif %};
  {% endfor %}
  RTTR_ENABLE()
};
{% endfor %}
{# END declare_structs #}

{{ namespace_end() }}
