{
package parser

import (
  "bytes"
  "strconv"
  "strings"
  "github.com/curoky/go-thrift-parser/parser/ast"
  log "github.com/sirupsen/logrus"
)

type cpp_include string

func toIfaceSlice(v interface{}) []interface{} {
  if v == nil {
      return nil
  }
  return v.([]interface{})
}

func ifaceSliceToString(v interface{}) string {
  ifs := toIfaceSlice(v)
  b := make([]byte, len(ifs))
  for i, v := range ifs {
  b[i] = v.([]uint8)[0]
  }
  return string(b)
}

func toPI64(value int64) *int64 {
	v := value
	return &v
}
func toPStr(value string) *string {
	v := value
	return &v
}

func toPF64(value float64) *float64 {
	v := value
	return &v
}

func toAnnotations(v interface{}) map[string]*ast.Annotation {
  if v == nil {
    return nil
  }
  return v.(map[string]*ast.Annotation)
}

func getSourceInfo(c *current) *ast.SourceInfo {
  return &ast.SourceInfo{
    Line: c.pos.line,
    Col: c.pos.col,
    Offset: c.pos.offset,
    Text: string(c.text),
  }
}

func computeIncludeName(path string) string {
  segs := strings.Split(path, "/")
  name := strings.Split(segs[len(segs)-1], ".")
  return name[0]
}

func registerType(c *current, typ *ast.Type) *ast.Type {
  thrift := c.globalStore["thrift"].(*ast.Thrift)
  thrift.AllTypes = append(thrift.AllTypes, typ)
  return typ
}
}

Document <- &{
  c.globalStore["thrift"] = &ast.Thrift{
		Includes: make([]*ast.Include, 0),
		Namespaces: make(map[string]*ast.Namespace, 0),
		Typedefs: make(map[string]*ast.Type, 0),
		Constants: make(map[string]*ast.Constant, 0),
		Enums: make(map[string]*ast.Type, 0),
		Structs: make(map[string]*ast.Type, 0),
		Unions: make(map[string]*ast.Type, 0),
		Exceptions: make(map[string]*ast.Type, 0),
		Services: make(map[string]*ast.Service, 0),
		AllTypes: make([]*ast.Type, 0),
  }
  return true, nil
} __ headers:(Header __)* definitions:(Definition __)* (EOF / EndOfDocumentError) {
  thrift := c.globalStore["thrift"].(*ast.Thrift)
	docs := make([]interface{}, 0)
  if headers != nil {
    docs = append(docs, toIfaceSlice(headers)...)
  }
  if definitions != nil {
    docs = append(docs, toIfaceSlice(definitions)...)
  }
	for _, st := range docs {
		switch v := st.([]interface{})[0].(type) {
      case *ast.Include:
        thrift.Includes = append(thrift.Includes, v)
      case cpp_include:
        thrift.CppIncludes = append(thrift.CppIncludes, string(v))
      case *ast.Namespace:
        thrift.Namespaces[v.Language] = v
      case *ast.Constant:
        thrift.Constants[v.Name] = v
      case *ast.Type:
        switch v.Category {
          case ast.CategoryEnum:
            thrift.Enums[v.Name] = v
          case ast.CategoryTypedef:
            thrift.Typedefs[v.Name] = v
          case ast.CategoryStruct:
            thrift.Structs[v.Name] = v
          case ast.CategoryUnion:
            thrift.Unions[v.Name] = v
          case ast.CategoryException:
            thrift.Exceptions[v.Name] = v
        }
      case *ast.Service:
        thrift.Services[v.Name] = v
      default:
        return nil, fmt.Errorf("parser: unknown value %#v", v)
		}
	}
	return thrift, nil
}

Header          <- Include / CppInclude / Namespace
Include         <- "include" _ file:Literal EOS {
  return &ast.Include{
    Path: file.(string),
    Name: computeIncludeName(file.(string)),
    SourceInfo: getSourceInfo(c),
  }, nil
}
CppInclude      <- "cpp_include" _ file:Literal EOS { return cpp_include(file.(string)), nil  }
Namespace       <- "namespace" _ scope:NamespaceScope _ ns:Identifier EOS {
  return &ast.Namespace{
    Language: scope.(string),
    Name: ns.(string),
    SourceInfo: getSourceInfo(c),
  }, nil
}
NamespaceScope  <-  ("*" / [a-z.-]+) { return string(c.text), nil }
Definition      <-  Const / Typedef / Enum / StructLike / Service // StructLike -> struct/exception/union
Const           <-  "const" _ typ:FieldType _ name:Identifier __ "=" __ value:ConstValue EOS {
  return &ast.Constant{
    Name: name.(string),
    Type: typ.(*ast.Type),
    Value: value.(*ast.ConstValue),
    SourceInfo: getSourceInfo(c),
  }, nil
}
Typedef         <-  "typedef" _ typ:FieldType _ name:Identifier _ annotations:TypeAnnotations? EOS {
  return &ast.Type{
    Name: name.(string),
    PreRefType: typ.(*ast.Type),
    Category: ast.CategoryTypedef,
    Annotations: toAnnotations(annotations),
    Belong: c.globalStore["thrift"].(*ast.Thrift),
    SourceInfo: getSourceInfo(c),
  }, nil
}
Enum            <-  "enum" _ name:Identifier __ '{' __ values:(EnumValue __)* '}' _ annotations:TypeAnnotations? EOS {
  vs := toIfaceSlice(values)
  en := &ast.Type{
    Name: name.(string),
    Values: make([]*ast.EnumValue, len(vs)),
    Category: ast.CategoryEnum,
    Annotations: toAnnotations(annotations),
    Belong: c.globalStore["thrift"].(*ast.Thrift),
    SourceInfo: getSourceInfo(c),
  }
  // TODO(curoky): Technically, all enum name must have value. So we need check emun value Strictly
  var nextValue int64 = 0
  for i, v := range vs {
    ev := v.([]interface{})[0].(*ast.EnumValue)
    if ev.Value < 0 {
      ev.Value = nextValue
      nextValue = nextValue + 1
    }
    en.Values[i] = ev
  }
  return en, nil
}
EnumValue       <-  name:Identifier _ value:('=' _ IntConstant)? _ annotations:TypeAnnotations? ListSeparator? {
  ev := &ast.EnumValue{
    Name: name.(string),
    Value: -1,
    Annotations: toAnnotations(annotations),
    SourceInfo: getSourceInfo(c),
  }
  if value != nil {
		ev.Value = value.([]interface{})[2].(int64)
	}
  return ev, nil
}
StructLike          <-  category:("struct"/"union"/"exception") _ struc:StructLikeImpl {
  st := struc.(*ast.Type)
  switch string(category.([]uint8)) {
    case "struct":
      st.Category = ast.CategoryStruct
    case "union":
      st.Category = ast.CategoryUnion
    case "exception":
      st.Category = ast.CategoryException
  }
  return st, nil
}
StructLikeImpl      <-  name:Identifier __ '{' __ fields:FieldList '}' _ annotations:TypeAnnotations? EOS {
  st := &ast.Type{
    Name: name.(string),
    Annotations: toAnnotations(annotations),
    SourceInfo: getSourceInfo(c),
  }
  if fields != nil {
    st.Fields = fields.([]*ast.Field)
  }
  return st, nil
}
Service         <-  "service" _ name:Identifier _ extends:("extends" __ Identifier __)? __ '{' __ methods:(Function __)* ('}' / EndOfServiceError) _ annotations:TypeAnnotations?  EOS {
  ms := methods.([]interface{})
  svc := &ast.Service{
    Name: name.(string),
    Functions: make([]*ast.Function, len(ms)),
    Annotations: toAnnotations(annotations),
    SourceInfo: getSourceInfo(c),
  }
  if extends != nil {
		svc.Extends = extends.([]interface{})[2].(string)
  }
  for i, m := range ms {
    svc.Functions[i] = m.([]interface{})[0].(*ast.Function)
  }
  return svc, nil
}
Field           <-  id:FieldID? _ req:FieldReq? _ typ:FieldType _ name:Identifier __ def:('=' _ ConstValue)? _ annotations:TypeAnnotations? ListSeparator? {
  f := &ast.Field{
    ID  : id.(int64),
    Name : name.(string),
    Type : typ.(*ast.Type),
    Annotations: toAnnotations(annotations),
    SourceInfo: getSourceInfo(c),
  }
  if req != nil {
    if !req.(bool) {
      f.Requiredness = ast.FieldTypeOptional
    } else {
      f.Requiredness = ast.FieldTypeRequired
    }
  } else {
    f.Requiredness = ast.FieldTypeDefault
  }
	if def != nil {
		f.Default = def.([]interface{})[2].(*ast.ConstValue)
	}
	return f, nil
}
FieldList       <-  fields:(Field __)* {
	fs := fields.([]interface{})
	flds := make([]*ast.Field, len(fs))
	for i, f := range fs {
		flds[i] = f.([]interface{})[0].(*ast.Field)
	}
	return flds, nil
}

FieldID         <-  id:IntConstant _ ':' { return id.(int64), nil }
FieldReq        <-  ("required" / "optional") {	return !bytes.Equal(c.text, []byte("optional")), nil }
Function        <-  oneway:("oneway" __)? typ:FunctionType __ name:Identifier _ '(' __ arguments:FieldList ')' __ exceptions:Throws? _ annotations:TypeAnnotations? ListSeparator? {
  m := &ast.Function{
    Name: name.(string),
		Annotations: toAnnotations(annotations),
    SourceInfo: getSourceInfo(c),
  }
  t := typ.(*ast.Type)
  if t.Name != "void" {
    m.ReturnType = t
  }
  if arguments != nil {
    m.Arguments = arguments.([]*ast.Field)
  }
  if exceptions != nil {
		m.Exceptions = exceptions.([]*ast.Field)
		for _, e := range m.Exceptions {
			e.Requiredness = ast.FieldTypeOptional
		}
  }
  return m, nil
}
// TODO(curoky): should merge void to FieldType ?
FunctionType    <-  typ:(FieldType / "void") {
  if t, ok := typ.(*ast.Type); ok {
    return t, nil
  }
  return &ast.Type{
    Name: string(c.text),
    Category: ast.CategoryVoid,
    SourceInfo: getSourceInfo(c),
  }, nil
}
Throws          <-  "throws" __ '(' __ exceptions:FieldList ')' { return exceptions, nil }

// Types
FieldType       <-  typ:(BaseType / ContainerType / Identifier) { // Identifier must at last
  if t, ok := typ.(string); ok {
    return registerType(c, &ast.Type{
      Name: string(t),
      Category: ast.CategoryIdentifier,
      Belong: c.globalStore["thrift"].(*ast.Thrift),
      SourceInfo: getSourceInfo(c),
    }), nil
	}
	return typ, nil
}
DefinitionType  <-  typ:(BaseType / ContainerType) { return typ, nil }
BaseType        <-  name:("bool" / "byte" / "i8" / "i16" / "i32" / "i64" / "double" / "string" / "binary" / "void") _ annotations:TypeAnnotations? {
  nameStr := string(name.([]uint8))
  category, _ := ast.ParseCategory(strings.Title(nameStr))
  return &ast.Type{
		Name: nameStr,
    Category: category,
		Annotations: toAnnotations(annotations),
    Belong: c.globalStore["thrift"].(*ast.Thrift),
    SourceInfo: getSourceInfo(c),
	}, nil
}
ContainerType   <-  typ:(MapType / SetType / ListType) { return typ, nil }
MapType         <-  "map" _ CppType? _ '<' _ key:FieldType _ ',' _ value:FieldType _ '>' _ annotations:TypeAnnotations? {
  return &ast.Type{
		Name: "map",
		KeyType: key.(*ast.Type),
		ValueType: value.(*ast.Type),
    Category: ast.CategoryMap,
		Annotations: toAnnotations(annotations),
    Belong: c.globalStore["thrift"].(*ast.Thrift),
    SourceInfo: getSourceInfo(c),
	}, nil
}
SetType         <-  "set" _ CppType? _ '<' _ typ:FieldType '>' _ annotations:TypeAnnotations? {
  return &ast.Type{
		Name: "set",
		ValueType: typ.(*ast.Type),
    Category: ast.CategorySet,
		Annotations: toAnnotations(annotations),
    Belong: c.globalStore["thrift"].(*ast.Thrift),
    SourceInfo: getSourceInfo(c),
	}, nil
}
ListType        <-  "list" _ '<' _ typ:FieldType _ '>' _ CppType? _ annotations:TypeAnnotations? {
  return &ast.Type{
		Name: "list",
		ValueType: typ.(*ast.Type),
    Category: ast.CategoryList,
		Annotations: toAnnotations(annotations),
    Belong: c.globalStore["thrift"].(*ast.Thrift),
    SourceInfo: getSourceInfo(c),
	}, nil
}
CppType         <-  "cpp_type" cppType:Literal { return cppType, nil }

// Constant Values
ConstValue      <-  ConstantInt / ConstDouble / ConstLiteral / ConstIdentifier / ConstList / ConstMap
ConstantInt     <-  value:IntConstant {
  return &ast.ConstValue{
    Type: ast.ConstTypeInt,
    TypedValue: &ast.ConstTypedValue{
      Int: toPI64(value.(int64)),
      SourceInfo: getSourceInfo(c),
    },
  }, nil
}
ConstDouble  <-  value:DoubleConstant {
  return &ast.ConstValue{
    Type: ast.ConstTypeDouble,
    TypedValue: &ast.ConstTypedValue{
      Double: toPF64(value.(float64)),
      SourceInfo: getSourceInfo(c),
    },
  }, nil
}
ConstList       <-  '[' __ values:(ConstValue __ ListSeparator? __)* ']' {
  valueSlice := values.([]interface{})
  cv := &ast.ConstValue{
    Type: ast.ConstTypeList,
    TypedValue: &ast.ConstTypedValue{
      List: make([]*ast.ConstValue, len(valueSlice)),
      SourceInfo: getSourceInfo(c),
    },
    SourceInfo: getSourceInfo(c),
  }
	for i, v := range valueSlice {
		cv.TypedValue.List[i] = v.([]interface{})[0].(*ast.ConstValue)
	}
	return cv, nil
}
ConstMap        <-  '{' __ values:(ConstValue __ ':' __ ConstValue __ ListSeparator? __)* '}' {
  if values == nil {
		return nil, nil
	}
	vals := values.([]interface{})
  cv := &ast.ConstValue{
    Type: ast.ConstTypeMap,
    TypedValue: &ast.ConstTypedValue{
      Map: make([]*ast.MapConstValue, len(vals)),
    },
    SourceInfo: getSourceInfo(c),
  }

	for i, kv := range vals {
		v := kv.([]interface{})
    cv.TypedValue.Map[i] = &ast.MapConstValue{
			Key: v[0].(*ast.ConstValue),
			Value: v[4].(*ast.ConstValue),
      SourceInfo: getSourceInfo(c),
		}
	}
	return cv, nil
}
ConstLiteral    <- literal:Literal {
  return &ast.ConstValue{
    Type: ast.ConstTypeLiteral,
    TypedValue: &ast.ConstTypedValue{
      Literal: toPStr(literal.(string)),
      SourceInfo: getSourceInfo(c),
    },
    SourceInfo: getSourceInfo(c),
  }, nil
}
ConstIdentifier    <- ident:Identifier {
  return &ast.ConstValue{
    Type: ast.ConstTypeIdentifier,
    TypedValue: &ast.ConstTypedValue{
      Identifier: ident.(*string),
      SourceInfo: getSourceInfo(c),
    },
    SourceInfo: getSourceInfo(c),
  }, nil
}

// Basic Definitions
IntConstant     <-  [-+]? Digit+ { return strconv.ParseInt(string(c.text), 10, 64) }
DoubleConstant  <-  [+-]? Digit* '.' Digit+ ( ['Ee'] IntConstant )? { return strconv.ParseFloat(string(c.text), 64) }
Literal         <-  (('"' (`\"` / [^"])* '"') / ('\'' (`\'` / [^'])* '\'')) {
	if len(c.text) != 0 && c.text[0] == '\'' {
		return strconv.Unquote(`"` + strings.Replace(string(c.text[1:len(c.text)-1]), `\'`, `'`, -1) + `"`)
	}
	return strconv.Unquote(string(c.text))
}
Identifier      <-  (Letter / '_')+ (Letter / Digit / [._])* { return string(c.text), nil }
ListSeparator   <-  [,;]
Letter          <-  [A-Za-z]
Digit           <-  [0-9]


TypeAnnotations ← '(' __ annotations:TypeAnnotation* ')' {
  var anns = make(map[string]*ast.Annotation)
	for _, ann := range annotations.([]interface{}) {
    t_ann := ann.(*ast.Annotation)
    anns[t_ann.Name] = t_ann
  }
	return anns, nil
}

TypeAnnotation ← name:Identifier _ value:('=' __ value:Literal { return value, nil })? ListSeparator? __ {
	var optValue string
	if value != nil {
		optValue = value.(string)
	}
	return &ast.Annotation{
	  Name: string(name.(string)),
		Value: optValue,
    SourceInfo: getSourceInfo(c),
	}, nil
}


//
SourceChar                <- .
Comment                   <- MultiLineComment / SingleLineComment
MultiLineComment          <- "/*" ( !"*/" SourceChar )* "*/"
MultiLineCommentNoLineTerminator <- "/*" ( !( "*/" / EOL ) SourceChar )* "*/"
SingleLineComment         <- ("//" ( !EOL SourceChar )*) / ("#" ( !EOL SourceChar )*)

__                        <- ( Whitespace / EOL / Comment )*
_                         <- ( Whitespace / MultiLineCommentNoLineTerminator )*
WS                        <- Whitespace*

Whitespace                <- [ \t\r]
EOL                       <- '\n'
EOS                       <- __ ';' / _ SingleLineComment? EOL / __ EOF

EOF                       <- !.

EndOfServiceError  <- . { return nil, errors.New("parser: expected end of service") }
EndOfDocumentError <- . { return nil, errors.New("parser: syntax error") }
