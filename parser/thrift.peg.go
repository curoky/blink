// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/curoky/go-thrift-parser/parser/ast"
)

func toIfaceSlice(v interface{}) []interface{} {
	if v == nil {
		return nil
	}
	return v.([]interface{})
}

func ifaceSliceToString(v interface{}) string {
	ifs := toIfaceSlice(v)
	b := make([]byte, len(ifs))
	for i, v := range ifs {
		b[i] = v.([]uint8)[0]
	}
	return string(b)
}

func toPI64(value int64) *int64 {
	v := value
	return &v
}
func toPStr(value string) *string {
	v := value
	return &v
}

func toPF64(value float64) *float64 {
	v := value
	return &v
}

func toAnnotations(v interface{}) map[string]*ast.Annotation {
	if v == nil {
		return nil
	}
	return v.(map[string]*ast.Annotation)
}

func getSourceInfo(c *current) *ast.SourceInfo {
	return &ast.SourceInfo{
		Line:   c.pos.line,
		Col:    c.pos.col,
		Offset: c.pos.offset,
		Text:   string(c.text),
	}
}

func computeIncludeName(path string) string {
	segs := strings.Split(path, "/")
	name := strings.Split(segs[len(segs)-1], ".")
	return name[0]
}

func registerType(c *current, typ *ast.Type) *ast.Type {
	document := c.globalStore["document"].(*ast.Document)
	document.AllTypes = append(document.AllTypes, typ)
	return typ
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Document",
			pos:  position{line: 71, col: 1, offset: 1279},
			expr: &actionExpr{
				pos: position{line: 71, col: 13, offset: 1291},
				run: (*parser).callonDocument1,
				expr: &seqExpr{
					pos: position{line: 71, col: 13, offset: 1291},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 71, col: 13, offset: 1291},
							run: (*parser).callonDocument3,
						},
						&ruleRefExpr{
							pos:  position{line: 86, col: 3, offset: 1824},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 86, col: 6, offset: 1827},
							label: "headers",
							expr: &zeroOrMoreExpr{
								pos: position{line: 86, col: 14, offset: 1835},
								expr: &seqExpr{
									pos: position{line: 86, col: 15, offset: 1836},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 86, col: 15, offset: 1836},
											name: "Header",
										},
										&ruleRefExpr{
											pos:  position{line: 86, col: 22, offset: 1843},
											name: "__",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 86, col: 27, offset: 1848},
							label: "definitions",
							expr: &zeroOrMoreExpr{
								pos: position{line: 86, col: 39, offset: 1860},
								expr: &seqExpr{
									pos: position{line: 86, col: 40, offset: 1861},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 86, col: 40, offset: 1861},
											name: "Definition",
										},
										&ruleRefExpr{
											pos:  position{line: 86, col: 51, offset: 1872},
											name: "__",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 86, col: 57, offset: 1878},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 86, col: 57, offset: 1878},
									name: "EOF",
								},
								&ruleRefExpr{
									pos:  position{line: 86, col: 63, offset: 1884},
									name: "EndOfDocumentError",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Header",
			pos:  position{line: 97, col: 1, offset: 2183},
			expr: &choiceExpr{
				pos: position{line: 97, col: 20, offset: 2202},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 97, col: 20, offset: 2202},
						name: "Include",
					},
					&ruleRefExpr{
						pos:  position{line: 97, col: 30, offset: 2212},
						name: "CppInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 97, col: 43, offset: 2225},
						name: "Namespace",
					},
				},
			},
		},
		{
			name: "Include",
			pos:  position{line: 98, col: 1, offset: 2235},
			expr: &actionExpr{
				pos: position{line: 98, col: 20, offset: 2254},
				run: (*parser).callonInclude1,
				expr: &seqExpr{
					pos: position{line: 98, col: 20, offset: 2254},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 98, col: 20, offset: 2254},
							val:        "include",
							ignoreCase: false,
							want:       "\"include\"",
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 30, offset: 2264},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 98, col: 32, offset: 2266},
							label: "file",
							expr: &ruleRefExpr{
								pos:  position{line: 98, col: 37, offset: 2271},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 45, offset: 2279},
							name: "EOS",
						},
					},
				},
			},
		},
		{
			name: "CppInclude",
			pos:  position{line: 105, col: 1, offset: 2423},
			expr: &actionExpr{
				pos: position{line: 105, col: 20, offset: 2442},
				run: (*parser).callonCppInclude1,
				expr: &seqExpr{
					pos: position{line: 105, col: 20, offset: 2442},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 105, col: 20, offset: 2442},
							val:        "cpp_include",
							ignoreCase: false,
							want:       "\"cpp_include\"",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 34, offset: 2456},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 105, col: 36, offset: 2458},
							label: "file",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 41, offset: 2463},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 49, offset: 2471},
							name: "EOS",
						},
					},
				},
			},
		},
		{
			name: "Namespace",
			pos:  position{line: 111, col: 1, offset: 2573},
			expr: &actionExpr{
				pos: position{line: 111, col: 20, offset: 2592},
				run: (*parser).callonNamespace1,
				expr: &seqExpr{
					pos: position{line: 111, col: 20, offset: 2592},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 111, col: 20, offset: 2592},
							val:        "namespace",
							ignoreCase: false,
							want:       "\"namespace\"",
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 32, offset: 2604},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 111, col: 34, offset: 2606},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 40, offset: 2612},
								name: "NamespaceScope",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 55, offset: 2627},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 111, col: 57, offset: 2629},
							label: "ns",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 60, offset: 2632},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 71, offset: 2643},
							name: "EOS",
						},
					},
				},
			},
		},
		{
			name: "NamespaceScope",
			pos:  position{line: 118, col: 1, offset: 2772},
			expr: &actionExpr{
				pos: position{line: 118, col: 21, offset: 2792},
				run: (*parser).callonNamespaceScope1,
				expr: &choiceExpr{
					pos: position{line: 118, col: 22, offset: 2793},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 118, col: 22, offset: 2793},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 118, col: 28, offset: 2799},
							expr: &charClassMatcher{
								pos:        position{line: 118, col: 28, offset: 2799},
								val:        "[a-z.-]",
								chars:      []rune{'.', '-'},
								ranges:     []rune{'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Definition",
			pos:  position{line: 119, col: 1, offset: 2840},
			expr: &choiceExpr{
				pos: position{line: 119, col: 21, offset: 2860},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 119, col: 21, offset: 2860},
						name: "Const",
					},
					&ruleRefExpr{
						pos:  position{line: 119, col: 29, offset: 2868},
						name: "Typedef",
					},
					&ruleRefExpr{
						pos:  position{line: 119, col: 39, offset: 2878},
						name: "Enum",
					},
					&ruleRefExpr{
						pos:  position{line: 119, col: 46, offset: 2885},
						name: "StructLike",
					},
					&ruleRefExpr{
						pos:  position{line: 119, col: 59, offset: 2898},
						name: "Service",
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 120, col: 1, offset: 2946},
			expr: &actionExpr{
				pos: position{line: 120, col: 21, offset: 2966},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 120, col: 21, offset: 2966},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 120, col: 21, offset: 2966},
							val:        "const",
							ignoreCase: false,
							want:       "\"const\"",
						},
						&ruleRefExpr{
							pos:  position{line: 120, col: 29, offset: 2974},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 120, col: 31, offset: 2976},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 35, offset: 2980},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 120, col: 45, offset: 2990},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 120, col: 47, offset: 2992},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 52, offset: 2997},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 120, col: 63, offset: 3008},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 120, col: 66, offset: 3011},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 120, col: 70, offset: 3015},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 120, col: 73, offset: 3018},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 79, offset: 3024},
								name: "ConstValue",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 120, col: 90, offset: 3035},
							name: "EOS",
						},
					},
				},
			},
		},
		{
			name: "Typedef",
			pos:  position{line: 128, col: 1, offset: 3198},
			expr: &actionExpr{
				pos: position{line: 128, col: 21, offset: 3218},
				run: (*parser).callonTypedef1,
				expr: &seqExpr{
					pos: position{line: 128, col: 21, offset: 3218},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 128, col: 21, offset: 3218},
							val:        "typedef",
							ignoreCase: false,
							want:       "\"typedef\"",
						},
						&ruleRefExpr{
							pos:  position{line: 128, col: 31, offset: 3228},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 128, col: 33, offset: 3230},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 128, col: 37, offset: 3234},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 128, col: 47, offset: 3244},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 128, col: 49, offset: 3246},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 128, col: 54, offset: 3251},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 128, col: 65, offset: 3262},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 128, col: 67, offset: 3264},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 128, col: 79, offset: 3276},
								expr: &ruleRefExpr{
									pos:  position{line: 128, col: 79, offset: 3276},
									name: "TypeAnnotations",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 128, col: 96, offset: 3293},
							name: "EOS",
						},
					},
				},
			},
		},
		{
			name: "Enum",
			pos:  position{line: 138, col: 1, offset: 3557},
			expr: &actionExpr{
				pos: position{line: 138, col: 21, offset: 3577},
				run: (*parser).callonEnum1,
				expr: &seqExpr{
					pos: position{line: 138, col: 21, offset: 3577},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 138, col: 21, offset: 3577},
							val:        "enum",
							ignoreCase: false,
							want:       "\"enum\"",
						},
						&ruleRefExpr{
							pos:  position{line: 138, col: 28, offset: 3584},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 30, offset: 3586},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 35, offset: 3591},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 138, col: 46, offset: 3602},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 138, col: 49, offset: 3605},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 138, col: 53, offset: 3609},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 56, offset: 3612},
							label: "values",
							expr: &zeroOrMoreExpr{
								pos: position{line: 138, col: 63, offset: 3619},
								expr: &seqExpr{
									pos: position{line: 138, col: 64, offset: 3620},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 138, col: 64, offset: 3620},
											name: "EnumValue",
										},
										&ruleRefExpr{
											pos:  position{line: 138, col: 74, offset: 3630},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 138, col: 79, offset: 3635},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&ruleRefExpr{
							pos:  position{line: 138, col: 83, offset: 3639},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 85, offset: 3641},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 138, col: 97, offset: 3653},
								expr: &ruleRefExpr{
									pos:  position{line: 138, col: 97, offset: 3653},
									name: "TypeAnnotations",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 138, col: 114, offset: 3670},
							name: "EOS",
						},
					},
				},
			},
		},
		{
			name: "EnumValue",
			pos:  position{line: 160, col: 1, offset: 4295},
			expr: &actionExpr{
				pos: position{line: 160, col: 21, offset: 4315},
				run: (*parser).callonEnumValue1,
				expr: &seqExpr{
					pos: position{line: 160, col: 21, offset: 4315},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 160, col: 21, offset: 4315},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 160, col: 26, offset: 4320},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 160, col: 37, offset: 4331},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 160, col: 39, offset: 4333},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 160, col: 45, offset: 4339},
								expr: &seqExpr{
									pos: position{line: 160, col: 46, offset: 4340},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 160, col: 46, offset: 4340},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
										&ruleRefExpr{
											pos:  position{line: 160, col: 50, offset: 4344},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 160, col: 52, offset: 4346},
											name: "IntConstant",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 160, col: 66, offset: 4360},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 160, col: 68, offset: 4362},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 160, col: 80, offset: 4374},
								expr: &ruleRefExpr{
									pos:  position{line: 160, col: 80, offset: 4374},
									name: "TypeAnnotations",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 160, col: 97, offset: 4391},
							expr: &ruleRefExpr{
								pos:  position{line: 160, col: 97, offset: 4391},
								name: "ListSeparator",
							},
						},
					},
				},
			},
		},
		{
			name: "StructLike",
			pos:  position{line: 172, col: 1, offset: 4643},
			expr: &actionExpr{
				pos: position{line: 172, col: 25, offset: 4667},
				run: (*parser).callonStructLike1,
				expr: &seqExpr{
					pos: position{line: 172, col: 25, offset: 4667},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 172, col: 25, offset: 4667},
							label: "category",
							expr: &choiceExpr{
								pos: position{line: 172, col: 35, offset: 4677},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 172, col: 35, offset: 4677},
										val:        "struct",
										ignoreCase: false,
										want:       "\"struct\"",
									},
									&litMatcher{
										pos:        position{line: 172, col: 44, offset: 4686},
										val:        "union",
										ignoreCase: false,
										want:       "\"union\"",
									},
									&litMatcher{
										pos:        position{line: 172, col: 52, offset: 4694},
										val:        "exception",
										ignoreCase: false,
										want:       "\"exception\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 65, offset: 4707},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 67, offset: 4709},
							label: "struc",
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 73, offset: 4715},
								name: "StructLikeImpl",
							},
						},
					},
				},
			},
		},
		{
			name: "StructLikeImpl",
			pos:  position{line: 185, col: 1, offset: 5032},
			expr: &actionExpr{
				pos: position{line: 185, col: 25, offset: 5056},
				run: (*parser).callonStructLikeImpl1,
				expr: &seqExpr{
					pos: position{line: 185, col: 25, offset: 5056},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 185, col: 25, offset: 5056},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 30, offset: 5061},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 185, col: 41, offset: 5072},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 185, col: 44, offset: 5075},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 185, col: 48, offset: 5079},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 185, col: 51, offset: 5082},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 58, offset: 5089},
								name: "FieldList",
							},
						},
						&litMatcher{
							pos:        position{line: 185, col: 68, offset: 5099},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&ruleRefExpr{
							pos:  position{line: 185, col: 72, offset: 5103},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 185, col: 74, offset: 5105},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 185, col: 86, offset: 5117},
								expr: &ruleRefExpr{
									pos:  position{line: 185, col: 86, offset: 5117},
									name: "TypeAnnotations",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 185, col: 103, offset: 5134},
							name: "EOS",
						},
					},
				},
			},
		},
		{
			name: "Service",
			pos:  position{line: 195, col: 1, offset: 5315},
			expr: &actionExpr{
				pos: position{line: 195, col: 21, offset: 5335},
				run: (*parser).callonService1,
				expr: &seqExpr{
					pos: position{line: 195, col: 21, offset: 5335},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 195, col: 21, offset: 5335},
							val:        "service",
							ignoreCase: false,
							want:       "\"service\"",
						},
						&ruleRefExpr{
							pos:  position{line: 195, col: 31, offset: 5345},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 195, col: 33, offset: 5347},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 195, col: 38, offset: 5352},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 195, col: 49, offset: 5363},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 195, col: 51, offset: 5365},
							label: "extends",
							expr: &zeroOrOneExpr{
								pos: position{line: 195, col: 59, offset: 5373},
								expr: &seqExpr{
									pos: position{line: 195, col: 60, offset: 5374},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 195, col: 60, offset: 5374},
											val:        "extends",
											ignoreCase: false,
											want:       "\"extends\"",
										},
										&ruleRefExpr{
											pos:  position{line: 195, col: 70, offset: 5384},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 195, col: 73, offset: 5387},
											name: "Identifier",
										},
										&ruleRefExpr{
											pos:  position{line: 195, col: 84, offset: 5398},
											name: "__",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 195, col: 89, offset: 5403},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 195, col: 92, offset: 5406},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 195, col: 96, offset: 5410},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 195, col: 99, offset: 5413},
							label: "methods",
							expr: &zeroOrMoreExpr{
								pos: position{line: 195, col: 107, offset: 5421},
								expr: &seqExpr{
									pos: position{line: 195, col: 108, offset: 5422},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 195, col: 108, offset: 5422},
											name: "Function",
										},
										&ruleRefExpr{
											pos:  position{line: 195, col: 117, offset: 5431},
											name: "__",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 195, col: 123, offset: 5437},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 195, col: 123, offset: 5437},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&ruleRefExpr{
									pos:  position{line: 195, col: 129, offset: 5443},
									name: "EndOfServiceError",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 195, col: 148, offset: 5462},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 195, col: 150, offset: 5464},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 195, col: 162, offset: 5476},
								expr: &ruleRefExpr{
									pos:  position{line: 195, col: 162, offset: 5476},
									name: "TypeAnnotations",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 195, col: 180, offset: 5494},
							name: "EOS",
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 211, col: 1, offset: 5897},
			expr: &actionExpr{
				pos: position{line: 211, col: 21, offset: 5917},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 211, col: 21, offset: 5917},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 211, col: 21, offset: 5917},
							label: "id",
							expr: &zeroOrOneExpr{
								pos: position{line: 211, col: 24, offset: 5920},
								expr: &ruleRefExpr{
									pos:  position{line: 211, col: 24, offset: 5920},
									name: "FieldID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 211, col: 33, offset: 5929},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 211, col: 35, offset: 5931},
							label: "req",
							expr: &zeroOrOneExpr{
								pos: position{line: 211, col: 39, offset: 5935},
								expr: &ruleRefExpr{
									pos:  position{line: 211, col: 39, offset: 5935},
									name: "FieldReq",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 211, col: 49, offset: 5945},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 211, col: 51, offset: 5947},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 211, col: 55, offset: 5951},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 211, col: 65, offset: 5961},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 211, col: 67, offset: 5963},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 211, col: 72, offset: 5968},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 211, col: 83, offset: 5979},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 211, col: 86, offset: 5982},
							label: "def",
							expr: &zeroOrOneExpr{
								pos: position{line: 211, col: 90, offset: 5986},
								expr: &seqExpr{
									pos: position{line: 211, col: 91, offset: 5987},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 211, col: 91, offset: 5987},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
										&ruleRefExpr{
											pos:  position{line: 211, col: 95, offset: 5991},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 211, col: 97, offset: 5993},
											name: "ConstValue",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 211, col: 110, offset: 6006},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 211, col: 112, offset: 6008},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 211, col: 124, offset: 6020},
								expr: &ruleRefExpr{
									pos:  position{line: 211, col: 124, offset: 6020},
									name: "TypeAnnotations",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 211, col: 141, offset: 6037},
							expr: &ruleRefExpr{
								pos:  position{line: 211, col: 141, offset: 6037},
								name: "ListSeparator",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldList",
			pos:  position{line: 233, col: 1, offset: 6529},
			expr: &actionExpr{
				pos: position{line: 233, col: 21, offset: 6549},
				run: (*parser).callonFieldList1,
				expr: &labeledExpr{
					pos:   position{line: 233, col: 21, offset: 6549},
					label: "fields",
					expr: &zeroOrMoreExpr{
						pos: position{line: 233, col: 28, offset: 6556},
						expr: &seqExpr{
							pos: position{line: 233, col: 29, offset: 6557},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 233, col: 29, offset: 6557},
									name: "Field",
								},
								&ruleRefExpr{
									pos:  position{line: 233, col: 35, offset: 6563},
									name: "__",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldID",
			pos:  position{line: 242, col: 1, offset: 6731},
			expr: &actionExpr{
				pos: position{line: 242, col: 21, offset: 6751},
				run: (*parser).callonFieldID1,
				expr: &seqExpr{
					pos: position{line: 242, col: 21, offset: 6751},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 242, col: 21, offset: 6751},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 24, offset: 6754},
								name: "IntConstant",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 36, offset: 6766},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 242, col: 38, offset: 6768},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
					},
				},
			},
		},
		{
			name: "FieldReq",
			pos:  position{line: 243, col: 1, offset: 6799},
			expr: &actionExpr{
				pos: position{line: 243, col: 21, offset: 6819},
				run: (*parser).callonFieldReq1,
				expr: &choiceExpr{
					pos: position{line: 243, col: 22, offset: 6820},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 243, col: 22, offset: 6820},
							val:        "required",
							ignoreCase: false,
							want:       "\"required\"",
						},
						&litMatcher{
							pos:        position{line: 243, col: 35, offset: 6833},
							val:        "optional",
							ignoreCase: false,
							want:       "\"optional\"",
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 244, col: 1, offset: 6902},
			expr: &actionExpr{
				pos: position{line: 244, col: 21, offset: 6922},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 244, col: 21, offset: 6922},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 244, col: 21, offset: 6922},
							label: "oneway",
							expr: &zeroOrOneExpr{
								pos: position{line: 244, col: 28, offset: 6929},
								expr: &seqExpr{
									pos: position{line: 244, col: 29, offset: 6930},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 244, col: 29, offset: 6930},
											val:        "oneway",
											ignoreCase: false,
											want:       "\"oneway\"",
										},
										&ruleRefExpr{
											pos:  position{line: 244, col: 38, offset: 6939},
											name: "__",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 244, col: 43, offset: 6944},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 47, offset: 6948},
								name: "FunctionType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 60, offset: 6961},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 63, offset: 6964},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 68, offset: 6969},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 79, offset: 6980},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 244, col: 81, offset: 6982},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 85, offset: 6986},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 88, offset: 6989},
							label: "arguments",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 98, offset: 6999},
								name: "FieldList",
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 108, offset: 7009},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 112, offset: 7013},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 115, offset: 7016},
							label: "exceptions",
							expr: &zeroOrOneExpr{
								pos: position{line: 244, col: 126, offset: 7027},
								expr: &ruleRefExpr{
									pos:  position{line: 244, col: 126, offset: 7027},
									name: "Throws",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 134, offset: 7035},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 136, offset: 7037},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 244, col: 148, offset: 7049},
								expr: &ruleRefExpr{
									pos:  position{line: 244, col: 148, offset: 7049},
									name: "TypeAnnotations",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 244, col: 165, offset: 7066},
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 165, offset: 7066},
								name: "ListSeparator",
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionType",
			pos:  position{line: 266, col: 1, offset: 7575},
			expr: &actionExpr{
				pos: position{line: 266, col: 21, offset: 7595},
				run: (*parser).callonFunctionType1,
				expr: &labeledExpr{
					pos:   position{line: 266, col: 21, offset: 7595},
					label: "typ",
					expr: &choiceExpr{
						pos: position{line: 266, col: 26, offset: 7600},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 266, col: 26, offset: 7600},
								name: "FieldType",
							},
							&litMatcher{
								pos:        position{line: 266, col: 38, offset: 7612},
								val:        "void",
								ignoreCase: false,
								want:       "\"void\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Throws",
			pos:  position{line: 276, col: 1, offset: 7803},
			expr: &actionExpr{
				pos: position{line: 276, col: 21, offset: 7823},
				run: (*parser).callonThrows1,
				expr: &seqExpr{
					pos: position{line: 276, col: 21, offset: 7823},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 276, col: 21, offset: 7823},
							val:        "throws",
							ignoreCase: false,
							want:       "\"throws\"",
						},
						&ruleRefExpr{
							pos:  position{line: 276, col: 30, offset: 7832},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 276, col: 33, offset: 7835},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 276, col: 37, offset: 7839},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 276, col: 40, offset: 7842},
							label: "exceptions",
							expr: &ruleRefExpr{
								pos:  position{line: 276, col: 51, offset: 7853},
								name: "FieldList",
							},
						},
						&litMatcher{
							pos:        position{line: 276, col: 61, offset: 7863},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "FieldType",
			pos:  position{line: 279, col: 1, offset: 7904},
			expr: &actionExpr{
				pos: position{line: 279, col: 21, offset: 7924},
				run: (*parser).callonFieldType1,
				expr: &labeledExpr{
					pos:   position{line: 279, col: 21, offset: 7924},
					label: "typ",
					expr: &choiceExpr{
						pos: position{line: 279, col: 26, offset: 7929},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 279, col: 26, offset: 7929},
								name: "BaseType",
							},
							&ruleRefExpr{
								pos:  position{line: 279, col: 37, offset: 7940},
								name: "ContainerType",
							},
							&ruleRefExpr{
								pos:  position{line: 279, col: 53, offset: 7956},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "DefinitionType",
			pos:  position{line: 290, col: 1, offset: 8258},
			expr: &actionExpr{
				pos: position{line: 290, col: 21, offset: 8278},
				run: (*parser).callonDefinitionType1,
				expr: &labeledExpr{
					pos:   position{line: 290, col: 21, offset: 8278},
					label: "typ",
					expr: &choiceExpr{
						pos: position{line: 290, col: 26, offset: 8283},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 290, col: 26, offset: 8283},
								name: "BaseType",
							},
							&ruleRefExpr{
								pos:  position{line: 290, col: 37, offset: 8294},
								name: "ContainerType",
							},
						},
					},
				},
			},
		},
		{
			name: "BaseType",
			pos:  position{line: 291, col: 1, offset: 8329},
			expr: &actionExpr{
				pos: position{line: 291, col: 21, offset: 8349},
				run: (*parser).callonBaseType1,
				expr: &seqExpr{
					pos: position{line: 291, col: 21, offset: 8349},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 291, col: 21, offset: 8349},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 291, col: 27, offset: 8355},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 291, col: 27, offset: 8355},
										val:        "bool",
										ignoreCase: false,
										want:       "\"bool\"",
									},
									&litMatcher{
										pos:        position{line: 291, col: 36, offset: 8364},
										val:        "byte",
										ignoreCase: false,
										want:       "\"byte\"",
									},
									&litMatcher{
										pos:        position{line: 291, col: 45, offset: 8373},
										val:        "i8",
										ignoreCase: false,
										want:       "\"i8\"",
									},
									&litMatcher{
										pos:        position{line: 291, col: 52, offset: 8380},
										val:        "i16",
										ignoreCase: false,
										want:       "\"i16\"",
									},
									&litMatcher{
										pos:        position{line: 291, col: 60, offset: 8388},
										val:        "i32",
										ignoreCase: false,
										want:       "\"i32\"",
									},
									&litMatcher{
										pos:        position{line: 291, col: 68, offset: 8396},
										val:        "i64",
										ignoreCase: false,
										want:       "\"i64\"",
									},
									&litMatcher{
										pos:        position{line: 291, col: 76, offset: 8404},
										val:        "double",
										ignoreCase: false,
										want:       "\"double\"",
									},
									&litMatcher{
										pos:        position{line: 291, col: 87, offset: 8415},
										val:        "string",
										ignoreCase: false,
										want:       "\"string\"",
									},
									&litMatcher{
										pos:        position{line: 291, col: 98, offset: 8426},
										val:        "binary",
										ignoreCase: false,
										want:       "\"binary\"",
									},
									&litMatcher{
										pos:        position{line: 291, col: 109, offset: 8437},
										val:        "void",
										ignoreCase: false,
										want:       "\"void\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 291, col: 117, offset: 8445},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 291, col: 119, offset: 8447},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 291, col: 131, offset: 8459},
								expr: &ruleRefExpr{
									pos:  position{line: 291, col: 131, offset: 8459},
									name: "TypeAnnotations",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContainerType",
			pos:  position{line: 302, col: 1, offset: 8776},
			expr: &actionExpr{
				pos: position{line: 302, col: 21, offset: 8796},
				run: (*parser).callonContainerType1,
				expr: &labeledExpr{
					pos:   position{line: 302, col: 21, offset: 8796},
					label: "typ",
					expr: &choiceExpr{
						pos: position{line: 302, col: 26, offset: 8801},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 302, col: 26, offset: 8801},
								name: "MapType",
							},
							&ruleRefExpr{
								pos:  position{line: 302, col: 36, offset: 8811},
								name: "SetType",
							},
							&ruleRefExpr{
								pos:  position{line: 302, col: 46, offset: 8821},
								name: "ListType",
							},
						},
					},
				},
			},
		},
		{
			name: "MapType",
			pos:  position{line: 303, col: 1, offset: 8851},
			expr: &actionExpr{
				pos: position{line: 303, col: 21, offset: 8871},
				run: (*parser).callonMapType1,
				expr: &seqExpr{
					pos: position{line: 303, col: 21, offset: 8871},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 303, col: 21, offset: 8871},
							val:        "map",
							ignoreCase: false,
							want:       "\"map\"",
						},
						&ruleRefExpr{
							pos:  position{line: 303, col: 27, offset: 8877},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 303, col: 29, offset: 8879},
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 29, offset: 8879},
								name: "CppType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 303, col: 38, offset: 8888},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 303, col: 40, offset: 8890},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&ruleRefExpr{
							pos:  position{line: 303, col: 44, offset: 8894},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 303, col: 46, offset: 8896},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 50, offset: 8900},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 303, col: 60, offset: 8910},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 303, col: 62, offset: 8912},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 303, col: 66, offset: 8916},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 303, col: 68, offset: 8918},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 74, offset: 8924},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 303, col: 84, offset: 8934},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 303, col: 86, offset: 8936},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&ruleRefExpr{
							pos:  position{line: 303, col: 90, offset: 8940},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 303, col: 92, offset: 8942},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 303, col: 104, offset: 8954},
								expr: &ruleRefExpr{
									pos:  position{line: 303, col: 104, offset: 8954},
									name: "TypeAnnotations",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SetType",
			pos:  position{line: 314, col: 1, offset: 9241},
			expr: &actionExpr{
				pos: position{line: 314, col: 21, offset: 9261},
				run: (*parser).callonSetType1,
				expr: &seqExpr{
					pos: position{line: 314, col: 21, offset: 9261},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 314, col: 21, offset: 9261},
							val:        "set",
							ignoreCase: false,
							want:       "\"set\"",
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 27, offset: 9267},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 314, col: 29, offset: 9269},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 29, offset: 9269},
								name: "CppType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 38, offset: 9278},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 314, col: 40, offset: 9280},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 44, offset: 9284},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 314, col: 46, offset: 9286},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 50, offset: 9290},
								name: "FieldType",
							},
						},
						&litMatcher{
							pos:        position{line: 314, col: 60, offset: 9300},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 64, offset: 9304},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 314, col: 66, offset: 9306},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 314, col: 78, offset: 9318},
								expr: &ruleRefExpr{
									pos:  position{line: 314, col: 78, offset: 9318},
									name: "TypeAnnotations",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListType",
			pos:  position{line: 324, col: 1, offset: 9575},
			expr: &actionExpr{
				pos: position{line: 324, col: 21, offset: 9595},
				run: (*parser).callonListType1,
				expr: &seqExpr{
					pos: position{line: 324, col: 21, offset: 9595},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 324, col: 21, offset: 9595},
							val:        "list",
							ignoreCase: false,
							want:       "\"list\"",
						},
						&ruleRefExpr{
							pos:  position{line: 324, col: 28, offset: 9602},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 324, col: 30, offset: 9604},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&ruleRefExpr{
							pos:  position{line: 324, col: 34, offset: 9608},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 324, col: 36, offset: 9610},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 40, offset: 9614},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 324, col: 50, offset: 9624},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 324, col: 52, offset: 9626},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&ruleRefExpr{
							pos:  position{line: 324, col: 56, offset: 9630},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 324, col: 58, offset: 9632},
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 58, offset: 9632},
								name: "CppType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 324, col: 67, offset: 9641},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 324, col: 69, offset: 9643},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 324, col: 81, offset: 9655},
								expr: &ruleRefExpr{
									pos:  position{line: 324, col: 81, offset: 9655},
									name: "TypeAnnotations",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CppType",
			pos:  position{line: 334, col: 1, offset: 9914},
			expr: &actionExpr{
				pos: position{line: 334, col: 21, offset: 9934},
				run: (*parser).callonCppType1,
				expr: &seqExpr{
					pos: position{line: 334, col: 21, offset: 9934},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 334, col: 21, offset: 9934},
							val:        "cpp_type",
							ignoreCase: false,
							want:       "\"cpp_type\"",
						},
						&labeledExpr{
							pos:   position{line: 334, col: 32, offset: 9945},
							label: "cppType",
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 40, offset: 9953},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstValue",
			pos:  position{line: 337, col: 1, offset: 10005},
			expr: &choiceExpr{
				pos: position{line: 337, col: 21, offset: 10025},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 337, col: 21, offset: 10025},
						name: "ConstantInt",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 35, offset: 10039},
						name: "ConstDouble",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 49, offset: 10053},
						name: "ConstLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 64, offset: 10068},
						name: "ConstIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 82, offset: 10086},
						name: "ConstList",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 94, offset: 10098},
						name: "ConstMap",
					},
				},
			},
		},
		{
			name: "ConstantInt",
			pos:  position{line: 338, col: 1, offset: 10107},
			expr: &actionExpr{
				pos: position{line: 338, col: 21, offset: 10127},
				run: (*parser).callonConstantInt1,
				expr: &labeledExpr{
					pos:   position{line: 338, col: 21, offset: 10127},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 338, col: 27, offset: 10133},
						name: "IntConstant",
					},
				},
			},
		},
		{
			name: "ConstDouble",
			pos:  position{line: 347, col: 1, offset: 10327},
			expr: &actionExpr{
				pos: position{line: 347, col: 18, offset: 10344},
				run: (*parser).callonConstDouble1,
				expr: &labeledExpr{
					pos:   position{line: 347, col: 18, offset: 10344},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 347, col: 24, offset: 10350},
						name: "DoubleConstant",
					},
				},
			},
		},
		{
			name: "ConstList",
			pos:  position{line: 356, col: 1, offset: 10555},
			expr: &actionExpr{
				pos: position{line: 356, col: 21, offset: 10575},
				run: (*parser).callonConstList1,
				expr: &seqExpr{
					pos: position{line: 356, col: 21, offset: 10575},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 356, col: 21, offset: 10575},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 356, col: 25, offset: 10579},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 356, col: 28, offset: 10582},
							label: "values",
							expr: &zeroOrMoreExpr{
								pos: position{line: 356, col: 35, offset: 10589},
								expr: &seqExpr{
									pos: position{line: 356, col: 36, offset: 10590},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 356, col: 36, offset: 10590},
											name: "ConstValue",
										},
										&ruleRefExpr{
											pos:  position{line: 356, col: 47, offset: 10601},
											name: "__",
										},
										&zeroOrOneExpr{
											pos: position{line: 356, col: 50, offset: 10604},
											expr: &ruleRefExpr{
												pos:  position{line: 356, col: 50, offset: 10604},
												name: "ListSeparator",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 356, col: 65, offset: 10619},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 356, col: 70, offset: 10624},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ConstMap",
			pos:  position{line: 371, col: 1, offset: 11014},
			expr: &actionExpr{
				pos: position{line: 371, col: 21, offset: 11034},
				run: (*parser).callonConstMap1,
				expr: &seqExpr{
					pos: position{line: 371, col: 21, offset: 11034},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 21, offset: 11034},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 371, col: 25, offset: 11038},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 371, col: 28, offset: 11041},
							label: "values",
							expr: &zeroOrMoreExpr{
								pos: position{line: 371, col: 35, offset: 11048},
								expr: &seqExpr{
									pos: position{line: 371, col: 36, offset: 11049},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 371, col: 36, offset: 11049},
											name: "ConstValue",
										},
										&ruleRefExpr{
											pos:  position{line: 371, col: 47, offset: 11060},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 371, col: 50, offset: 11063},
											val:        ":",
											ignoreCase: false,
											want:       "\":\"",
										},
										&ruleRefExpr{
											pos:  position{line: 371, col: 54, offset: 11067},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 371, col: 57, offset: 11070},
											name: "ConstValue",
										},
										&ruleRefExpr{
											pos:  position{line: 371, col: 68, offset: 11081},
											name: "__",
										},
										&zeroOrOneExpr{
											pos: position{line: 371, col: 71, offset: 11084},
											expr: &ruleRefExpr{
												pos:  position{line: 371, col: 71, offset: 11084},
												name: "ListSeparator",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 371, col: 86, offset: 11099},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 371, col: 91, offset: 11104},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "ConstLiteral",
			pos:  position{line: 394, col: 1, offset: 11598},
			expr: &actionExpr{
				pos: position{line: 394, col: 20, offset: 11617},
				run: (*parser).callonConstLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 394, col: 20, offset: 11617},
					label: "literal",
					expr: &ruleRefExpr{
						pos:  position{line: 394, col: 28, offset: 11625},
						name: "Literal",
					},
				},
			},
		},
		{
			name: "ConstIdentifier",
			pos:  position{line: 404, col: 1, offset: 11860},
			expr: &actionExpr{
				pos: position{line: 404, col: 23, offset: 11882},
				run: (*parser).callonConstIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 404, col: 23, offset: 11882},
					label: "ident",
					expr: &ruleRefExpr{
						pos:  position{line: 404, col: 29, offset: 11888},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "IntConstant",
			pos:  position{line: 416, col: 1, offset: 12145},
			expr: &actionExpr{
				pos: position{line: 416, col: 21, offset: 12165},
				run: (*parser).callonIntConstant1,
				expr: &seqExpr{
					pos: position{line: 416, col: 21, offset: 12165},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 416, col: 21, offset: 12165},
							expr: &charClassMatcher{
								pos:        position{line: 416, col: 21, offset: 12165},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 416, col: 27, offset: 12171},
							expr: &ruleRefExpr{
								pos:  position{line: 416, col: 27, offset: 12171},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleConstant",
			pos:  position{line: 417, col: 1, offset: 12230},
			expr: &actionExpr{
				pos: position{line: 417, col: 21, offset: 12250},
				run: (*parser).callonDoubleConstant1,
				expr: &seqExpr{
					pos: position{line: 417, col: 21, offset: 12250},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 417, col: 21, offset: 12250},
							expr: &charClassMatcher{
								pos:        position{line: 417, col: 21, offset: 12250},
								val:        "[+-]",
								chars:      []rune{'+', '-'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 417, col: 27, offset: 12256},
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 27, offset: 12256},
								name: "Digit",
							},
						},
						&litMatcher{
							pos:        position{line: 417, col: 34, offset: 12263},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 417, col: 38, offset: 12267},
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 38, offset: 12267},
								name: "Digit",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 417, col: 45, offset: 12274},
							expr: &seqExpr{
								pos: position{line: 417, col: 47, offset: 12276},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 417, col: 47, offset: 12276},
										val:        "['Ee']",
										chars:      []rune{'\'', 'E', 'e', '\''},
										ignoreCase: false,
										inverted:   false,
									},
									&ruleRefExpr{
										pos:  position{line: 417, col: 54, offset: 12283},
										name: "IntConstant",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 418, col: 1, offset: 12348},
			expr: &actionExpr{
				pos: position{line: 418, col: 21, offset: 12368},
				run: (*parser).callonLiteral1,
				expr: &choiceExpr{
					pos: position{line: 418, col: 22, offset: 12369},
					alternatives: []interface{}{
						&seqExpr{
							pos: position{line: 418, col: 23, offset: 12370},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 418, col: 23, offset: 12370},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 418, col: 27, offset: 12374},
									expr: &choiceExpr{
										pos: position{line: 418, col: 28, offset: 12375},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 418, col: 28, offset: 12375},
												val:        "\\\"",
												ignoreCase: false,
												want:       "\"\\\\\\\"\"",
											},
											&charClassMatcher{
												pos:        position{line: 418, col: 35, offset: 12382},
												val:        "[^\"]",
												chars:      []rune{'"'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 418, col: 42, offset: 12389},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
							},
						},
						&seqExpr{
							pos: position{line: 418, col: 50, offset: 12397},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 418, col: 50, offset: 12397},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 418, col: 55, offset: 12402},
									expr: &choiceExpr{
										pos: position{line: 418, col: 56, offset: 12403},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 418, col: 56, offset: 12403},
												val:        "\\'",
												ignoreCase: false,
												want:       "\"\\\\'\"",
											},
											&charClassMatcher{
												pos:        position{line: 418, col: 63, offset: 12410},
												val:        "[^']",
												chars:      []rune{'\''},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 418, col: 70, offset: 12417},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 424, col: 1, offset: 12617},
			expr: &actionExpr{
				pos: position{line: 424, col: 21, offset: 12637},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 424, col: 21, offset: 12637},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 424, col: 21, offset: 12637},
							expr: &choiceExpr{
								pos: position{line: 424, col: 22, offset: 12638},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 424, col: 22, offset: 12638},
										name: "Letter",
									},
									&litMatcher{
										pos:        position{line: 424, col: 31, offset: 12647},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 424, col: 37, offset: 12653},
							expr: &choiceExpr{
								pos: position{line: 424, col: 38, offset: 12654},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 424, col: 38, offset: 12654},
										name: "Letter",
									},
									&ruleRefExpr{
										pos:  position{line: 424, col: 47, offset: 12663},
										name: "Digit",
									},
									&charClassMatcher{
										pos:        position{line: 424, col: 55, offset: 12671},
										val:        "[._]",
										chars:      []rune{'.', '_'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListSeparator",
			pos:  position{line: 425, col: 1, offset: 12709},
			expr: &charClassMatcher{
				pos:        position{line: 425, col: 21, offset: 12729},
				val:        "[,;]",
				chars:      []rune{',', ';'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Letter",
			pos:  position{line: 426, col: 1, offset: 12734},
			expr: &charClassMatcher{
				pos:        position{line: 426, col: 21, offset: 12754},
				val:        "[A-Za-z]",
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Digit",
			pos:  position{line: 427, col: 1, offset: 12763},
			expr: &charClassMatcher{
				pos:        position{line: 427, col: 21, offset: 12783},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "TypeAnnotations",
			pos:  position{line: 430, col: 1, offset: 12791},
			expr: &actionExpr{
				pos: position{line: 430, col: 19, offset: 12811},
				run: (*parser).callonTypeAnnotations1,
				expr: &seqExpr{
					pos: position{line: 430, col: 19, offset: 12811},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 430, col: 19, offset: 12811},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 430, col: 23, offset: 12815},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 430, col: 26, offset: 12818},
							label: "annotations",
							expr: &zeroOrMoreExpr{
								pos: position{line: 430, col: 38, offset: 12830},
								expr: &ruleRefExpr{
									pos:  position{line: 430, col: 38, offset: 12830},
									name: "TypeAnnotation",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 430, col: 54, offset: 12846},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "TypeAnnotation",
			pos:  position{line: 439, col: 1, offset: 13038},
			expr: &actionExpr{
				pos: position{line: 439, col: 18, offset: 13057},
				run: (*parser).callonTypeAnnotation1,
				expr: &seqExpr{
					pos: position{line: 439, col: 18, offset: 13057},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 439, col: 18, offset: 13057},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 23, offset: 13062},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 439, col: 34, offset: 13073},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 439, col: 36, offset: 13075},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 439, col: 42, offset: 13081},
								expr: &actionExpr{
									pos: position{line: 439, col: 43, offset: 13082},
									run: (*parser).callonTypeAnnotation8,
									expr: &seqExpr{
										pos: position{line: 439, col: 43, offset: 13082},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 439, col: 43, offset: 13082},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&ruleRefExpr{
												pos:  position{line: 439, col: 47, offset: 13086},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 439, col: 50, offset: 13089},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 439, col: 56, offset: 13095},
													name: "Literal",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 439, col: 88, offset: 13127},
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 88, offset: 13127},
								name: "ListSeparator",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 439, col: 103, offset: 13142},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "SourceChar",
			pos:  position{line: 453, col: 1, offset: 13343},
			expr: &anyMatcher{
				line: 453, col: 30, offset: 13372,
			},
		},
		{
			name: "Comment",
			pos:  position{line: 454, col: 1, offset: 13374},
			expr: &choiceExpr{
				pos: position{line: 454, col: 30, offset: 13403},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 454, col: 30, offset: 13403},
						name: "MultiLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 454, col: 49, offset: 13422},
						name: "SingleLineComment",
					},
				},
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 455, col: 1, offset: 13440},
			expr: &seqExpr{
				pos: position{line: 455, col: 30, offset: 13469},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 455, col: 30, offset: 13469},
						val:        "/*",
						ignoreCase: false,
						want:       "\"/*\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 455, col: 35, offset: 13474},
						expr: &seqExpr{
							pos: position{line: 455, col: 37, offset: 13476},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 455, col: 37, offset: 13476},
									expr: &litMatcher{
										pos:        position{line: 455, col: 38, offset: 13477},
										val:        "*/",
										ignoreCase: false,
										want:       "\"*/\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 455, col: 43, offset: 13482},
									name: "SourceChar",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 455, col: 57, offset: 13496},
						val:        "*/",
						ignoreCase: false,
						want:       "\"*/\"",
					},
				},
			},
		},
		{
			name: "MultiLineCommentNoLineTerminator",
			pos:  position{line: 456, col: 1, offset: 13501},
			expr: &seqExpr{
				pos: position{line: 456, col: 37, offset: 13537},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 456, col: 37, offset: 13537},
						val:        "/*",
						ignoreCase: false,
						want:       "\"/*\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 456, col: 42, offset: 13542},
						expr: &seqExpr{
							pos: position{line: 456, col: 44, offset: 13544},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 456, col: 44, offset: 13544},
									expr: &choiceExpr{
										pos: position{line: 456, col: 47, offset: 13547},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 456, col: 47, offset: 13547},
												val:        "*/",
												ignoreCase: false,
												want:       "\"*/\"",
											},
											&ruleRefExpr{
												pos:  position{line: 456, col: 54, offset: 13554},
												name: "EOL",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 456, col: 60, offset: 13560},
									name: "SourceChar",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 456, col: 74, offset: 13574},
						val:        "*/",
						ignoreCase: false,
						want:       "\"*/\"",
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 457, col: 1, offset: 13579},
			expr: &choiceExpr{
				pos: position{line: 457, col: 30, offset: 13608},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 457, col: 31, offset: 13609},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 457, col: 31, offset: 13609},
								val:        "//",
								ignoreCase: false,
								want:       "\"//\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 457, col: 36, offset: 13614},
								expr: &seqExpr{
									pos: position{line: 457, col: 38, offset: 13616},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 457, col: 38, offset: 13616},
											expr: &ruleRefExpr{
												pos:  position{line: 457, col: 39, offset: 13617},
												name: "EOL",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 457, col: 43, offset: 13621},
											name: "SourceChar",
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 457, col: 61, offset: 13639},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 457, col: 61, offset: 13639},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 457, col: 65, offset: 13643},
								expr: &seqExpr{
									pos: position{line: 457, col: 67, offset: 13645},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 457, col: 67, offset: 13645},
											expr: &ruleRefExpr{
												pos:  position{line: 457, col: 68, offset: 13646},
												name: "EOL",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 457, col: 72, offset: 13650},
											name: "SourceChar",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 459, col: 1, offset: 13666},
			expr: &zeroOrMoreExpr{
				pos: position{line: 459, col: 30, offset: 13695},
				expr: &choiceExpr{
					pos: position{line: 459, col: 32, offset: 13697},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 459, col: 32, offset: 13697},
							name: "Whitespace",
						},
						&ruleRefExpr{
							pos:  position{line: 459, col: 45, offset: 13710},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 459, col: 51, offset: 13716},
							name: "Comment",
						},
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 460, col: 1, offset: 13727},
			expr: &zeroOrMoreExpr{
				pos: position{line: 460, col: 30, offset: 13756},
				expr: &choiceExpr{
					pos: position{line: 460, col: 32, offset: 13758},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 460, col: 32, offset: 13758},
							name: "Whitespace",
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 45, offset: 13771},
							name: "MultiLineCommentNoLineTerminator",
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 461, col: 1, offset: 13807},
			expr: &zeroOrMoreExpr{
				pos: position{line: 461, col: 30, offset: 13836},
				expr: &ruleRefExpr{
					pos:  position{line: 461, col: 30, offset: 13836},
					name: "Whitespace",
				},
			},
		},
		{
			name: "Whitespace",
			pos:  position{line: 463, col: 1, offset: 13849},
			expr: &charClassMatcher{
				pos:        position{line: 463, col: 30, offset: 13878},
				val:        "[ \\t\\r]",
				chars:      []rune{' ', '\t', '\r'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EOL",
			pos:  position{line: 464, col: 1, offset: 13886},
			expr: &litMatcher{
				pos:        position{line: 464, col: 30, offset: 13915},
				val:        "\n",
				ignoreCase: false,
				want:       "\"\\n\"",
			},
		},
		{
			name: "EOS",
			pos:  position{line: 465, col: 1, offset: 13920},
			expr: &choiceExpr{
				pos: position{line: 465, col: 30, offset: 13949},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 465, col: 30, offset: 13949},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 465, col: 30, offset: 13949},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 465, col: 33, offset: 13952},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 465, col: 39, offset: 13958},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 465, col: 39, offset: 13958},
								name: "_",
							},
							&zeroOrOneExpr{
								pos: position{line: 465, col: 41, offset: 13960},
								expr: &ruleRefExpr{
									pos:  position{line: 465, col: 41, offset: 13960},
									name: "SingleLineComment",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 465, col: 60, offset: 13979},
								name: "EOL",
							},
						},
					},
					&seqExpr{
						pos: position{line: 465, col: 66, offset: 13985},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 465, col: 66, offset: 13985},
								name: "__",
							},
							&ruleRefExpr{
								pos:  position{line: 465, col: 69, offset: 13988},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 467, col: 1, offset: 13993},
			expr: &notExpr{
				pos: position{line: 467, col: 30, offset: 14022},
				expr: &anyMatcher{
					line: 467, col: 31, offset: 14023,
				},
			},
		},
		{
			name: "EndOfServiceError",
			pos:  position{line: 469, col: 1, offset: 14026},
			expr: &actionExpr{
				pos: position{line: 469, col: 23, offset: 14048},
				run: (*parser).callonEndOfServiceError1,
				expr: &anyMatcher{
					line: 469, col: 23, offset: 14048,
				},
			},
		},
		{
			name: "EndOfDocumentError",
			pos:  position{line: 470, col: 1, offset: 14112},
			expr: &actionExpr{
				pos: position{line: 470, col: 23, offset: 14134},
				run: (*parser).callonEndOfDocumentError1,
				expr: &anyMatcher{
					line: 470, col: 23, offset: 14134,
				},
			},
		},
	},
}

func (c *current) onDocument3() (bool, error) {
	c.globalStore["document"] = &ast.Document{
		Body:       make([]interface{}, 0),
		Includes:   make([]*ast.Include, 0),
		Namespaces: make(map[string]*ast.Namespace, 0),
		Typedefs:   make(map[string]*ast.Type, 0),
		Constants:  make(map[string]*ast.Constant, 0),
		Enums:      make(map[string]*ast.Type, 0),
		Structs:    make(map[string]*ast.Type, 0),
		Unions:     make(map[string]*ast.Type, 0),
		Exceptions: make(map[string]*ast.Type, 0),
		Services:   make(map[string]*ast.Service, 0),
		AllTypes:   make([]*ast.Type, 0),
	}
	return true, nil
}

func (p *parser) callonDocument3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument3()
}

func (c *current) onDocument1(headers, definitions interface{}) (interface{}, error) {
	document := c.globalStore["document"].(*ast.Document)
	if headers != nil {
		document.Body = append(document.Body, toIfaceSlice(headers)...)
	}
	if definitions != nil {
		document.Body = append(document.Body, toIfaceSlice(definitions)...)
	}
	return document, nil
}

func (p *parser) callonDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument1(stack["headers"], stack["definitions"])
}

func (c *current) onInclude1(file interface{}) (interface{}, error) {
	return &ast.Include{
		Path:       file.(string),
		Name:       computeIncludeName(file.(string)),
		SourceInfo: getSourceInfo(c),
	}, nil
}

func (p *parser) callonInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInclude1(stack["file"])
}

func (c *current) onCppInclude1(file interface{}) (interface{}, error) {
	return &ast.CppInclude{
		Name:       file.(string),
		SourceInfo: getSourceInfo(c),
	}, nil
}

func (p *parser) callonCppInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCppInclude1(stack["file"])
}

func (c *current) onNamespace1(scope, ns interface{}) (interface{}, error) {
	return &ast.Namespace{
		Language:   scope.(string),
		Name:       ns.(string),
		SourceInfo: getSourceInfo(c),
	}, nil
}

func (p *parser) callonNamespace1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamespace1(stack["scope"], stack["ns"])
}

func (c *current) onNamespaceScope1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamespaceScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamespaceScope1()
}

func (c *current) onConst1(typ, name, value interface{}) (interface{}, error) {
	return &ast.Constant{
		Name:       name.(string),
		Type:       typ.(*ast.Type),
		Value:      value.(*ast.ConstValue),
		SourceInfo: getSourceInfo(c),
	}, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["typ"], stack["name"], stack["value"])
}

func (c *current) onTypedef1(typ, name, annotations interface{}) (interface{}, error) {
	return &ast.Type{
		Name:        name.(string),
		PreRefType:  typ.(*ast.Type),
		Category:    ast.CategoryTypedef,
		Annotations: toAnnotations(annotations),
		Belong:      c.globalStore["document"].(*ast.Document),
		SourceInfo:  getSourceInfo(c),
	}, nil
}

func (p *parser) callonTypedef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedef1(stack["typ"], stack["name"], stack["annotations"])
}

func (c *current) onEnum1(name, values, annotations interface{}) (interface{}, error) {
	vs := toIfaceSlice(values)
	en := &ast.Type{
		Name:        name.(string),
		Values:      make([]*ast.EnumValue, len(vs)),
		Category:    ast.CategoryEnum,
		Annotations: toAnnotations(annotations),
		Belong:      c.globalStore["document"].(*ast.Document),
		SourceInfo:  getSourceInfo(c),
	}
	// TODO(curoky): Technically, all enum name must have value. So we need check emun value Strictly
	var nextValue int64 = 0
	for i, v := range vs {
		ev := v.([]interface{})[0].(*ast.EnumValue)
		if ev.Value < 0 {
			ev.Value = nextValue
			nextValue = nextValue + 1
		}
		en.Values[i] = ev
	}
	return en, nil
}

func (p *parser) callonEnum1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnum1(stack["name"], stack["values"], stack["annotations"])
}

func (c *current) onEnumValue1(name, value, annotations interface{}) (interface{}, error) {
	ev := &ast.EnumValue{
		Name:        name.(string),
		Value:       -1,
		Annotations: toAnnotations(annotations),
		SourceInfo:  getSourceInfo(c),
	}
	if value != nil {
		ev.Value = value.([]interface{})[2].(int64)
	}
	return ev, nil
}

func (p *parser) callonEnumValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnumValue1(stack["name"], stack["value"], stack["annotations"])
}

func (c *current) onStructLike1(category, struc interface{}) (interface{}, error) {
	st := struc.(*ast.Type)
	switch string(category.([]uint8)) {
	case "struct":
		st.Category = ast.CategoryStruct
	case "union":
		st.Category = ast.CategoryUnion
	case "exception":
		st.Category = ast.CategoryException
	}
	st.SourceInfo = getSourceInfo(c)
	return st, nil
}

func (p *parser) callonStructLike1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStructLike1(stack["category"], stack["struc"])
}

func (c *current) onStructLikeImpl1(name, fields, annotations interface{}) (interface{}, error) {
	st := &ast.Type{
		Name:        name.(string),
		Annotations: toAnnotations(annotations),
	}
	if fields != nil {
		st.Fields = fields.([]*ast.Field)
	}
	return st, nil
}

func (p *parser) callonStructLikeImpl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStructLikeImpl1(stack["name"], stack["fields"], stack["annotations"])
}

func (c *current) onService1(name, extends, methods, annotations interface{}) (interface{}, error) {
	ms := methods.([]interface{})
	svc := &ast.Service{
		Name:        name.(string),
		Functions:   make([]*ast.Function, len(ms)),
		Annotations: toAnnotations(annotations),
		SourceInfo:  getSourceInfo(c),
	}
	if extends != nil {
		svc.Extends = extends.([]interface{})[2].(string)
	}
	for i, m := range ms {
		svc.Functions[i] = m.([]interface{})[0].(*ast.Function)
	}
	return svc, nil
}

func (p *parser) callonService1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onService1(stack["name"], stack["extends"], stack["methods"], stack["annotations"])
}

func (c *current) onField1(id, req, typ, name, def, annotations interface{}) (interface{}, error) {
	f := &ast.Field{
		ID:          id.(int64),
		Name:        name.(string),
		Type:        typ.(*ast.Type),
		Annotations: toAnnotations(annotations),
		SourceInfo:  getSourceInfo(c),
	}
	if req != nil {
		if !req.(bool) {
			f.Requiredness = ast.FieldTypeOptional
		} else {
			f.Requiredness = ast.FieldTypeRequired
		}
	} else {
		f.Requiredness = ast.FieldTypeDefault
	}
	if def != nil {
		f.Default = def.([]interface{})[2].(*ast.ConstValue)
	}
	return f, nil
}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["id"], stack["req"], stack["typ"], stack["name"], stack["def"], stack["annotations"])
}

func (c *current) onFieldList1(fields interface{}) (interface{}, error) {
	fs := fields.([]interface{})
	flds := make([]*ast.Field, len(fs))
	for i, f := range fs {
		flds[i] = f.([]interface{})[0].(*ast.Field)
	}
	return flds, nil
}

func (p *parser) callonFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldList1(stack["fields"])
}

func (c *current) onFieldID1(id interface{}) (interface{}, error) {
	return id.(int64), nil
}

func (p *parser) callonFieldID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldID1(stack["id"])
}

func (c *current) onFieldReq1() (interface{}, error) {
	return !bytes.Equal(c.text, []byte("optional")), nil
}

func (p *parser) callonFieldReq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldReq1()
}

func (c *current) onFunction1(oneway, typ, name, arguments, exceptions, annotations interface{}) (interface{}, error) {
	m := &ast.Function{
		Name:        name.(string),
		Annotations: toAnnotations(annotations),
		SourceInfo:  getSourceInfo(c),
	}
	t := typ.(*ast.Type)
	if t.Name != "void" {
		m.ReturnType = t
	}
	if arguments != nil {
		m.Arguments = arguments.([]*ast.Field)
	}
	if exceptions != nil {
		m.Exceptions = exceptions.([]*ast.Field)
		for _, e := range m.Exceptions {
			e.Requiredness = ast.FieldTypeOptional
		}
	}
	return m, nil
}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["oneway"], stack["typ"], stack["name"], stack["arguments"], stack["exceptions"], stack["annotations"])
}

func (c *current) onFunctionType1(typ interface{}) (interface{}, error) {
	if t, ok := typ.(*ast.Type); ok {
		return t, nil
	}
	return &ast.Type{
		Name:       string(c.text),
		Category:   ast.CategoryVoid,
		SourceInfo: getSourceInfo(c),
	}, nil
}

func (p *parser) callonFunctionType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionType1(stack["typ"])
}

func (c *current) onThrows1(exceptions interface{}) (interface{}, error) {
	return exceptions, nil
}

func (p *parser) callonThrows1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThrows1(stack["exceptions"])
}

func (c *current) onFieldType1(typ interface{}) (interface{}, error) {
	// Identifier must at last
	if t, ok := typ.(string); ok {
		return registerType(c, &ast.Type{
			Name:       string(t),
			Category:   ast.CategoryIdentifier,
			Belong:     c.globalStore["document"].(*ast.Document),
			SourceInfo: getSourceInfo(c),
		}), nil
	}
	return typ, nil
}

func (p *parser) callonFieldType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldType1(stack["typ"])
}

func (c *current) onDefinitionType1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonDefinitionType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefinitionType1(stack["typ"])
}

func (c *current) onBaseType1(name, annotations interface{}) (interface{}, error) {
	nameStr := string(name.([]uint8))
	category, _ := ast.ParseCategory(strings.Title(nameStr))
	return &ast.Type{
		Name:        nameStr,
		Category:    category,
		Annotations: toAnnotations(annotations),
		Belong:      c.globalStore["document"].(*ast.Document),
		SourceInfo:  getSourceInfo(c),
	}, nil
}

func (p *parser) callonBaseType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBaseType1(stack["name"], stack["annotations"])
}

func (c *current) onContainerType1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonContainerType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContainerType1(stack["typ"])
}

func (c *current) onMapType1(key, value, annotations interface{}) (interface{}, error) {
	return &ast.Type{
		Name:        "map",
		KeyType:     key.(*ast.Type),
		ValueType:   value.(*ast.Type),
		Category:    ast.CategoryMap,
		Annotations: toAnnotations(annotations),
		Belong:      c.globalStore["document"].(*ast.Document),
		SourceInfo:  getSourceInfo(c),
	}, nil
}

func (p *parser) callonMapType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMapType1(stack["key"], stack["value"], stack["annotations"])
}

func (c *current) onSetType1(typ, annotations interface{}) (interface{}, error) {
	return &ast.Type{
		Name:        "set",
		ValueType:   typ.(*ast.Type),
		Category:    ast.CategorySet,
		Annotations: toAnnotations(annotations),
		Belong:      c.globalStore["document"].(*ast.Document),
		SourceInfo:  getSourceInfo(c),
	}, nil
}

func (p *parser) callonSetType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetType1(stack["typ"], stack["annotations"])
}

func (c *current) onListType1(typ, annotations interface{}) (interface{}, error) {
	return &ast.Type{
		Name:        "list",
		ValueType:   typ.(*ast.Type),
		Category:    ast.CategoryList,
		Annotations: toAnnotations(annotations),
		Belong:      c.globalStore["document"].(*ast.Document),
		SourceInfo:  getSourceInfo(c),
	}, nil
}

func (p *parser) callonListType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListType1(stack["typ"], stack["annotations"])
}

func (c *current) onCppType1(cppType interface{}) (interface{}, error) {
	return cppType, nil
}

func (p *parser) callonCppType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCppType1(stack["cppType"])
}

func (c *current) onConstantInt1(value interface{}) (interface{}, error) {
	return &ast.ConstValue{
		Type: ast.ConstTypeInt,
		TypedValue: &ast.ConstTypedValue{
			Int:        toPI64(value.(int64)),
			SourceInfo: getSourceInfo(c),
		},
	}, nil
}

func (p *parser) callonConstantInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstantInt1(stack["value"])
}

func (c *current) onConstDouble1(value interface{}) (interface{}, error) {
	return &ast.ConstValue{
		Type: ast.ConstTypeDouble,
		TypedValue: &ast.ConstTypedValue{
			Double:     toPF64(value.(float64)),
			SourceInfo: getSourceInfo(c),
		},
	}, nil
}

func (p *parser) callonConstDouble1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDouble1(stack["value"])
}

func (c *current) onConstList1(values interface{}) (interface{}, error) {
	valueSlice := values.([]interface{})
	cv := &ast.ConstValue{
		Type: ast.ConstTypeList,
		TypedValue: &ast.ConstTypedValue{
			List:       make([]*ast.ConstValue, len(valueSlice)),
			SourceInfo: getSourceInfo(c),
		},
		SourceInfo: getSourceInfo(c),
	}
	for i, v := range valueSlice {
		cv.TypedValue.List[i] = v.([]interface{})[0].(*ast.ConstValue)
	}
	return cv, nil
}

func (p *parser) callonConstList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstList1(stack["values"])
}

func (c *current) onConstMap1(values interface{}) (interface{}, error) {
	if values == nil {
		return nil, nil
	}
	vals := values.([]interface{})
	cv := &ast.ConstValue{
		Type: ast.ConstTypeMap,
		TypedValue: &ast.ConstTypedValue{
			Map: make([]*ast.MapConstValue, len(vals)),
		},
		SourceInfo: getSourceInfo(c),
	}

	for i, kv := range vals {
		v := kv.([]interface{})
		cv.TypedValue.Map[i] = &ast.MapConstValue{
			Key:        v[0].(*ast.ConstValue),
			Value:      v[4].(*ast.ConstValue),
			SourceInfo: getSourceInfo(c),
		}
	}
	return cv, nil
}

func (p *parser) callonConstMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstMap1(stack["values"])
}

func (c *current) onConstLiteral1(literal interface{}) (interface{}, error) {
	return &ast.ConstValue{
		Type: ast.ConstTypeLiteral,
		TypedValue: &ast.ConstTypedValue{
			Literal:    toPStr(literal.(string)),
			SourceInfo: getSourceInfo(c),
		},
		SourceInfo: getSourceInfo(c),
	}, nil
}

func (p *parser) callonConstLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstLiteral1(stack["literal"])
}

func (c *current) onConstIdentifier1(ident interface{}) (interface{}, error) {
	return &ast.ConstValue{
		Type: ast.ConstTypeIdentifier,
		TypedValue: &ast.ConstTypedValue{
			Identifier: ident.(*string),
			SourceInfo: getSourceInfo(c),
		},
		SourceInfo: getSourceInfo(c),
	}, nil
}

func (p *parser) callonConstIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstIdentifier1(stack["ident"])
}

func (c *current) onIntConstant1() (interface{}, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonIntConstant1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntConstant1()
}

func (c *current) onDoubleConstant1() (interface{}, error) {
	return strconv.ParseFloat(string(c.text), 64)
}

func (p *parser) callonDoubleConstant1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleConstant1()
}

func (c *current) onLiteral1() (interface{}, error) {
	if len(c.text) != 0 && c.text[0] == '\'' {
		return strconv.Unquote(`"` + strings.Replace(string(c.text[1:len(c.text)-1]), `\'`, `'`, -1) + `"`)
	}
	return strconv.Unquote(string(c.text))
}

func (p *parser) callonLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral1()
}

func (c *current) onIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onTypeAnnotations1(annotations interface{}) (interface{}, error) {
	var anns = make(map[string]*ast.Annotation)
	for _, ann := range annotations.([]interface{}) {
		t_ann := ann.(*ast.Annotation)
		anns[t_ann.Name] = t_ann
	}
	return anns, nil
}

func (p *parser) callonTypeAnnotations1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAnnotations1(stack["annotations"])
}

func (c *current) onTypeAnnotation8(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTypeAnnotation8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAnnotation8(stack["value"])
}

func (c *current) onTypeAnnotation1(name, value interface{}) (interface{}, error) {
	var optValue string
	if value != nil {
		optValue = value.(string)
	}
	return &ast.Annotation{
		Name:       string(name.(string)),
		Value:      optValue,
		SourceInfo: getSourceInfo(c),
	}, nil
}

func (p *parser) callonTypeAnnotation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAnnotation1(stack["name"], stack["value"])
}

func (c *current) onEndOfServiceError1() (interface{}, error) {
	return nil, errors.New("parser: expected end of service")
}

func (p *parser) callonEndOfServiceError1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndOfServiceError1()
}

func (c *current) onEndOfDocumentError1() (interface{}, error) {
	return nil, errors.New("parser: syntax error")
}

func (p *parser) callonEndOfDocumentError1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndOfDocumentError1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
